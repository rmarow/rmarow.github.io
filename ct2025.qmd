---
tite: "Creative Technologies 2025"
---

## ATLS 5410 Motor Buffet

Group members: Caitlin Littlejohn, Robyn Marowitz, Eli Skelly, Clayton Hester


### Project overview 
Our idea was to create a maze that is either controlled by either 4 directional buttons or a joystick and use 2 motors in order to have movement in all 4 directions. 

### **Key Considerations**  

- **Motor Selection â€“ Servo or Stepper?**  
  We initially explored both options but ultimately chose **servo motors**, as we found more relevant documentation and examples supporting this approach.  

- **Maze Material â€“ Laser-Cut Wood or 3D Printing?**  
  Aesthetically, we liked the idea of carving the maze out of wood. However, considering **marble size** and **motor strength**, we decided that **3D printing** would be the more practical choice.  

- **Power **
Initially we worked with it plugged into the computer, but since there is a box to contain the wires and system we wanted to be able to hide the power in there. Ultimately a 5V power bank was what worked best for this. 


#### Phase 1: Prototyping and
Getting the motors to work together and be controlled by a joystick.  

![](attachments/mb-joystick.MOV){width=300}

#### Phase 2: Testing the system with cardboard.  

![](attachments/mb-cardboard.MOV){width=300}

#### Phase 3: Putting the pieces together

Printing a bracket to attach the motor to the maze and testing it.  

![](attachments/mb-motor-attachment.jpg){width=300}

Putting it all together.  

![](attachments/mb-final-photo.jpg){width=300}
![](attachments/mb-final-vid.MP4){width=300}



## IDC2: Final Project:

### Continuing with IDC1:

New Components to Add

1. 3D Printed/Laser Cut Component: Design and create a medieval castle facade/housing that encloses the Arduino and circuitry. This could include:
* Castle walls and towers (laser cut from wood or acrylic)
* 3D printed details like battlements, a drawbridge, or a mechanism for the auto-reload


2. Auto-Reload Mechanism:
* Add a servo motor and track system to automatically reset the catapult arm
* Create an "ammunition" storage and feeding system

3. Improved Interface:
* Mount buttons on the front of the box/castle for user control

### Potential new ideas

#### Automated row counter for knitting

##### **Project Overview**
An **Automated Row Counter** is a small device that helps knitters track their rows and stitches automatically, reducing the need for manual counting. The device could be attached to the knitting needles or worn like a ring, and it would detect movement (knitting motion) or rely on manual input (a small button press per row). The count would be displayed on an LED screen or a mobile app. Recently I was knitting a blanket that had a 17 row pattern and it felt impossible to keep track sometimes and I had to start over twice then just accepted that the pattern would not be perfect. 

---

##### **Design Considerations**

**1. Input Mechanism (How to Detect Row Progress)**
- **Button-Based:** A small button that you press at the end of each row.
- **Motion Sensor (Accelerometer/Gyro):** Detects wrist or needle movement and counts stitches or rows automatically.
- **Magnetic Switch (Reed Switch):** Detects when the needle passes a fixed point using a tiny magnet.
- **Conductive Yarn Sensors:** Detects electrical contact between knitting needles at the start of each row.

**2. Display/Feedback Mechanism**
- **Small OLED Screen:** Shows row count and updates in real time.
- **LED Indicator:** Blinks a specific color after a set number of rows (e.g., every 10 rows).
- **Vibration Feedback:** Provides haptic feedback when you reach a milestone.
- **Mobile App or Web Interface:** Connects via Bluetooth to track progress.

**3. Power & Enclosure**
- **Battery-Powered (Rechargeable or Coin Cell):** Needs to be compact and long-lasting.
- **Enclosure:** 3D printed or laser-cut case to attach to knitting needles, clip onto fabric, or be worn like a ring.

---

##### **Additional Features & Enhancements**
- **Pattern Assistance:** Store knitting patterns and provide step reminders.
- **Undo Option:** If you make a mistake, a small button lets you decrease the row count.
- **Multiple Counters:** Track multiple projects at once with different row counters.
- **Customizable Alerts:** Set alerts for increases/decreases, color changes, or pattern repeats.
- **Data Logging & Connectivity:** Send data to a smartphone app for tracking progress over time.

---

##### **Technical Breakdown**
- **Microcontroller:** Arduino (Nano, ESP32, or similar) to handle inputs and processing.
- **Sensor Options:**
  - Button for manual row counting.
  - Accelerometer or gyroscope for motion-based detection.
  - Magnetic reed switch for passive tracking.
- **Display:** OLED screen or LED indicators.
- **Power Source:** Rechargeable battery with efficient power management.
- **Communication (Optional):** Bluetooth for mobile app connectivity.
- **Enclosure:** Custom 3D-printed or laser-cut case for ease of use.

---

#### **Next Steps**
1. **Prototype Input Detection:** Test a motion sensor vs. button input.
   - Consider if this works in the round or just on standard needles. 
2. **Determine Display Needs:** Simple LED feedback vs. OLED display.
3. **Build a Basic Prototype:** Get an Arduino counting rows based on input.
4. **Design the Enclosure:** Think about how to attach the device in a way thatâ€™s comfortable for knitters.

---

#### **Decision: Button-Based vs. Motion-Based?**

- **Button-Based:** More reliable, easy to implement, and less prone to errors.
- **Motion-Based:** Fully automated, but might require tuning to avoid false counts.
- Would this 



## ATLS 5410 IDC1: Independent Design Challenge 1  
### Solving a Personal Pet Peeve  

#### **Idea 1: Approach Indicator Light**  
**Pet Peeve:** Interruptions when focused. I work from home a few days a week and my desk is in the common area of the apartment but faces the wall and I get very frustrated if my boyfriend approaches while I am in a focused flow state. Sometimes it is also hard for him to tell if I am on a call or not, but as I am usually on camera I'm not easily able to tell him that. 

**Solution:**  
A **smart light** that detects when my boyfriend is near and displays a status message based on my availability - kind of like an "On Air" sign at a recording studio. The system could use a **proximity sensor** to detect his presence and display one of the following messages:  
- ðŸŸ¥ **"On a call"**   
- ðŸŸ¨ **"Focusing"**  
- ðŸŸ© **"Say Hey"**  

**Possible Components:**  
- **Ultrasonic sensor / RFID module** (for detection)  
- **LED strip or LCD screen** (to display the message)  
- **Button or voice control** (to manually change status)  
- **Arduino** (microcontroller for processing)  

### Notes from meeting:
- consider an attack mechanism for when someone gets too close (i.e. noise or water shooter)

### Working through the project:
Upon meeting with Zack I decided to move forward with the **Approach Indicator Light**. This would be put in my desk area which is in a common space. 

![](attachments/desk-area.jpeg){width=300}

### **Phase 1: Getting the Basics Working**  

To start, I focused on understanding each key component individually.  

- **Ultrasonic Sensor:** First, I set up the sensor to measure distance and print values to the serial monitor. Then, I integrated it with LEDs to trigger different colors based on detected distance.  
  ![](attachments/sensor-and-leds.jpeg){width=300}  

- **Button Logic:** I initially wanted a single button to cycle through modes, but after testing, I found this unreliable. Instead, I opted for separate buttons for each mode to ensure consistent switching.  

- **Exploring an LCD Screen:** My next step was experimenting with an LCD to display messages instead of using only LED indicators. However, the setup required too many pins and didn't display text reliably, so I shelved that idea.  
  ![](attachments/stay-away-lcd.jpeg){width=300}  


At this point, I felt confident in both the concept and my ability to get components working. Inspired by **Motor Buffet**, I decided to take things further: **introducing a servo-powered catapult as a defense mechanism.** If someone ignored the "Do Not Disturb" light and got too close â€” they'd get hit with a (lightweight) projectile.

### **Phase 2: Adding the Catapult & Finalizing the Code**  

Building the catapult was an adventure in itself. I 3D-printed a small design (not without a minor print failure first)...  
  ![](attachments/failed-catapult.jpeg){width=300}  

  ![](attachments/catapult-vid.mov){width=300}  

â€¦but persistence paid off! I eventually had a **working mini catapult** with the motor causing the release. (had to do some minor tweaks to the 3D print)

![](attachments/all-function.MOV){width=300}

At this stage, everything was coming together:  
âœ… **3 LEDs** for different modes  
âœ… **3 buttons** for manual mode switching  
âœ… **An ultrasonic sensor** for detection  
âœ… **A servo motor-powered catapult** for unwanted intruders  

**Behavior for each mode:**  

- **ðŸ”´ Red Mode (Do Not Disturb)**  
  - Red light is on at all times.  
  - If someone gets within **3 feet**, the red LED blinks as a warning.  
  - If they get within **12 inches**, the catapult **fires** and the light blinks faster. 

- **ðŸŸ¡ Yellow Mode (Proceed with Caution)**  
  - Yellow light is on.  
  - The closer someone gets, the yellow light begins blinking then blinks faster.  

- **ðŸŸ¢ Green Mode (Okay to Approach)**  
  - Green light is on, signaling itâ€™s fine to talk.  

### **Phase 3: Improving Aesthetics & Usability**  

As it can be seen this quickly became pretty busy with all the used pins.

![](attachments/final-1.jpeg){width=300}

![](attachments/overhead.jpeg){width=300}

I moved the buttons to their own breadboard so that they would be more easily usable.
![]attachments/buttons-moved.jpeg){width=300}

Then I ultimately moved the buttons again and soldiered some of the wires to be even cleaner.  
![](attachments/soldiered-buttons.jpeg){width=300}

### Final working product DEMO

**This was the final look**  
![](attachments/final-setup-aerial.jpg){width=300}

All functions demo:  

![](attachments/catapult.MOV){width=300}

### **Phase 4: Future Ideas & In-Class Feedback**  

#### **In-Class Feedback:**  
During class, I received feedback suggesting:  
- **Make it look like a medieval castle** to match the catapult theme.  
- **Improve the catapult mechanism** to include auto-reloading.  

#### **Future Improvements:**  
- **Solder more components** to make the setup more permanent and reliable.  
- **Move the sensor and lights** onto the same surface as the catapult.  
- **Mount the whole system on a box**, creating a more contained and polished design.  
- **Place the buttons on the front of the box** for better usability.  
- Better wire management overall.

Overall, this project turned out to be a **fun mix of practical and absurd**, blending real-world productivity solutions with a slightly *over-the-top* approach to personal space. ðŸ˜†

## Unused IDC1 ideas
#### **Idea 2: Meal Decider**  
**Pet Peeve:** Struggling to decide what to eat for lunch or dinner. 

**Solution:**  
A physical meal suggestion device that helps pick a meal based on my input and sends a recipe from a list of pre-selected options to my phone via bluetooth. I want te options to be pre-selected since I have some allergies/dietary restrictions and want them to be things I would actuallty want to make. 

**How it Works:**  
1. **Press a button or turn a dial** to generate a random meal suggestion.  
2. The **LCD screen or LED display** shows the meal idea (Tacos, Curry, etc)
3. **Bluetooth sends a recipe link** to my phone for the selected meal.  
4. (Optional) A second button allows for a **re-roll** if I donâ€™t like the first option.  

**Possible Components:**  
- **Push button or rotary dial** (to select a meal).  
- **LCD screen or LED matrix** (to display meal suggestions).  
- **HC-05 or HC-06 Bluetooth module** (to send recipe links to my phone).  
- **Arduino** (to handle meal selection, display, and Bluetooth connection).  
- **Pre-set meal list** with corresponding recipe URLs.  

**Challenges & Considerations:**  
- Ensuring **Bluetooth pairing** is smooth and simple.  
- How to encorporate a pre-set list of meal ideas and recipe links.  

#### **Idea 3: Euchre Scorekeeper**

**Pet Peeve:** Keeping score during Euchre can be tricky, especially when drinking, chatting, or multitasking. People forget to update the score, and sometimes thereâ€™s debate about what it should be.  

**Solution** 
A simple Euchre Scorekeeper that tracks the gameâ€™s progress with minimal effort so players can focus on having fun.  

**Features**  
- **Single-button simplicity:** Each team has one buttonâ€”click it the correct number of times to record points.  
- **Handles Euchre-specific scoring rules:**  
  - 1 click = 1 point (standard round win).  
  - 2 clicks = 2 points (team wins all 5 tricks or Euchres opponents).  
  - 4 clicks = 4 points (someone goes alone and wins).  
- **Visible score display:** A bright LED or LCD screen shows the current score at all times.  
- **Drinking-Friendly Mode:** Can provide random demands like*"Time for a cheers!"*.  
- **Auto-reset:** When a team reaches 10 points, the device flashes the winnerâ€™s name and resets automatically.  

**How It Works**
1. Each team has one button.  
2. The button is pressed once per point earned (1, 2, or 4 times).  
3. The LED display updates the score in real time.  
4. When a team reaches 10 points, the game announces the winner and resets automatically.  

**Components**  
- **2 push buttons** (one for each team).  
- **LED display or LCD screen** to show the score.  
- **Arduino** (to process scoring logic).  
- **Buzzer or LED flash** when a team scores.  

**Challenges & Considerations**  
- Avoiding accidental button presses 
- Ensuring points are counted correctly (a short delay between clicks to prevent double-counting).  
- Should there be an undo option?  
