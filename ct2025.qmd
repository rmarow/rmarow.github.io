---
tite: "Creative Technologies 2025"
---

## ATLS 5410 Motor Buffet

Group members: Caitlin Littlejohn, Robyn Marowitz, Eli Skelly, Clayton Hester


### Project overview 
Our idea was to create a maze that is either controlled by either 4 directional buttons or a joystick and use 2 motors in order to have movement in all 4 directions. 

### **Key Considerations**  

- **Motor Selection â€“ Servo or Stepper?**  
  We initially explored both options but ultimately chose **servo motors**, as we found more relevant documentation and examples supporting this approach.  

- **Maze Material â€“ Laser-Cut Wood or 3D Printing?**  
  Aesthetically, we liked the idea of carving the maze out of wood. However, considering **marble size** and **motor strength**, we decided that **3D printing** would be the more practical choice.  

- **Power **
Initially we worked with it plugged into the computer, but since there is a box to contain the wires and system we wanted to be able to hide the power in there. Ultimately a 5V power bank was what worked best for this. 


#### Phase 1: Prototyping and
Getting the motors to work together and be controlled by a joystick.  

![](attachments/mb-joystick.MOV){width=300}

#### Phase 2: Testing the system with cardboard.  

![](attachments/mb-cardboard.MOV){width=300}

#### Phase 3: Putting the pieces together

Printing a bracket to attach the motor to the maze and testing it.  

![](attachments/mb-motor-attachment.jpg){width=300}

Putting it all together.  

![](attachments/mb-final-photo.jpg){width=300}
![](attachments/mb-final-vid.MP4){width=300}

## IDC2: Final Project

### Continuing from IDC1

**New Components to Add:**
1. **Laser Cut/3D Printed Castle Enclosure**  
   - Medieval-themed housing for the Arduino and circuitry.
   - Castle walls, towers, and 3D-printed battlements or ammo storage.

2. **Auto-Reset Mechanism**  
   - Add a second motor to reposition the catapult spoon after firing.

3. **Improved Interface**  
   - Mount three user buttons on the front of the box for easier access.
   - Upgrade lighting with a Neopixel strip for better visual feedback.

---

## ATLS 5410 IDC1: Independent Design Challenge 1  
### Solving a Personal Pet Peeve

**Pet Peeve:**  
Working from home, my desk faces a wall in a shared space. Interruptions during deep work or calls became frustratingâ€”especially since it wasnâ€™t obvious when I was unavailable.

**Solution:**  
A **smart approach indicator light** that displays my availability and deters interruptions with lightsâ€”and, if necessary, a catapult!

**Key Components:**
- Ultrasonic sensor (for detecting approach)
- LED indicators (red, yellow, green)
- Buttons (to switch availability mode)
- Servo motor (to trigger catapult attack)

---

## Phase 1: Getting the Basics Working

I started by setting up the ultrasonic sensor to measure distance and display readings via the Serial Monitor.  
![](attachments/sensor-and-leds.jpeg){width=300}

Button testing revealed that individual buttons for each mode were more reliable than a single toggle button. I briefly experimented with an LCD screen, but it used too many pins and was visually cluttered.  
![](attachments/stay-away-lcd.jpeg){width=300}

Building confidence with sensors and logic, I decided to escalate the project by adding a **servo-controlled mini catapult**.

---

## Phase 2: Adding the Catapult & Finalizing Code

I 3D printed a small catapult (after a few failed prints)â€¦  
![](attachments/failed-catapult.jpeg){width=300}  
â€¦but persistence paid off!  
![](attachments/catapult-vid.mov){width=300}

By this stage:  
âœ… Three button-controlled modes  
âœ… Neatly wired ultrasonic sensor  
âœ… Servo motor firing mechanism for the catapult

**Mode Behavior:**
- ðŸ”´ **Red Mode** (Do Not Disturb): Solid red light; if someone approaches, the LED blinks and catapult fires.
- ðŸŸ¡ **Yellow Mode** (Caution): Solid yellow light; blinks faster as someone approaches.
- ðŸŸ¢ **Green Mode** (Friendly): Solid green light, welcoming approach.

---

## Phase 3: Improving Aesthetics & Usability

Wiring quickly became chaotic with all components on one breadboard.  
![](attachments/final-1.jpeg){width=300}

I moved the buttons to a separate breadboard:  
![](attachments/buttons-moved.jpeg){width=300}

Later, I soldered key connections to create a cleaner, more reliable interface:  
![](attachments/soldiered-buttons.jpeg){width=300}

---

## Phase 4: Figuring Out How to Improve

After meeting with Zack, I prioritized:
- **Better Lighting** (Neopixels)
- **Stronger Aesthetics** (castle enclosure)
- **Auto-Reset for Catapult**

I tested using a Neopixel strip to replace the individual LEDs, improving visibility and flexibility for status changes.

---

## Phase 5: Adding New Components

This phase brought everything together:
- **Laser Cut Castle Enclosure:**  
  Designing, prototyping, and finally building a medieval-themed box to house the electronics.
- **Neopixel Lighting Integration:**  
  Full-color status feedback replacing simple LEDs.
- **Ammo Bowl:**  
  3D printed a tray to keep extra projectiles neatly stored.

Laser cutting the enclosure took a few attempts to align everything correctly, but the final version enhanced both appearance and durability.

---

## Final Demo

**Final Setup:**  
![](attachments/final-setup-aerial.jpg){width=300}

**All Functions Demo:**  
![](attachments/catapult.MOV){width=300}

---

## Future Work

One feature I explored but could not fully complete was **automatically pulling the catapult arm back into position**. I experimented with a **28BYJ-48 stepper motor** attached to a string, but wasnâ€™t able to generate enough torque for consistent resets.

For future iterations, I would:
- Upgrade to a more powerful stepper motor (e.g., NEMA 17)
- Redesign the reset linkage to require less force

---

# Summary

This project turned into a fun blend of **real-world productivity signaling** and a **slightly absurd medieval defense system**â€”exactly the creative combination I was aiming for.


## Unused IDC ideas

#### **Automated row counter for knitting**

##### **Project Overview**
An **Automated Row Counter** is a small device that helps knitters track their rows and stitches automatically, reducing the need for manual counting. The device could be attached to the knitting needles or worn like a ring, and it would detect movement (knitting motion) or rely on manual input (a small button press per row). The count would be displayed on an LED screen or a mobile app. Recently I was knitting a blanket that had a 17 row pattern and it felt impossible to keep track sometimes and I had to start over twice then just accepted that the pattern would not be perfect. 

---

##### **Design Considerations**

**1. Input Mechanism (How to Detect Row Progress)**  
- **Button-Based:** A small button that you press at the end of each row.  
- **Motion Sensor (Accelerometer/Gyro):** Detects wrist or needle movement and counts stitches automatically.  
- **Magnetic Switch (Reed Switch):** Detects when the needle passes a fixed point using a tiny magnet.
- **Conductive Yarn Sensors:** Detects electrical contact between knitting needles at the start of each row.

**2. Display/Feedback Mechanism**  
- **Small OLED Screen:** Shows row count and updates in real time.  
- **LED Indicator:** Blinks a specific color after a set number of rows (e.g., every 10 rows).  
- **Vibration Feedback:** Provides haptic feedback when you reach a milestone.  
- **Mobile App or Web Interface:** Connects via Bluetooth to track progress.

**3. Power & Enclosure**  
- **Battery-Powered (Rechargeable or Coin Cell):** Needs to be compact and long-lasting.  
- **Enclosure:** 3D printed or laser-cut case to attach to knitting needles, clip onto fabric, or be worn like a ring.

---

##### **Additional Features & Enhancements**
- **Undo Option:** If you make a mistake, a small button lets you decrease the row count.
- **Customizable Alerts:** Set alerts for increases/decreases, color changes, or pattern repeats.
- **Data Logging & Connectivity:** Send data to a smartphone app for tracking progress over time.
**stretch**
- **Pattern Assistance:** Store knitting patterns and provide step reminders.
- **Multiple Counters:** Track multiple projects at once with different row counters.
---

##### **Technical Breakdown**
- **Microcontroller:** Arduino (Nano, ESP32, or similar) to handle inputs and processing.
- **Sensor Options:**
  - Button for manual row counting.
  - Accelerometer or gyroscope for motion-based detection.
  - Magnetic reed switch for passive tracking.
- **Display:** OLED screen or LED indicators.
- **Power Source:** Rechargeable battery with efficient power management.
- **Communication (Optional):** Bluetooth for mobile app connectivity.
- **Enclosure:** Custom 3D-printed or laser-cut case for ease of use.

---

#### **Next Steps**
1. **Prototype Input Detection:** Test a motion sensor vs. button input.
   - Consider if this works in the round or just on standard needles. 
2. **Determine Display Needs:** Simple LED feedback vs. OLED display.
3. **Build a Basic Prototype:** Get an Arduino counting rows based on input.
4. **Design the Enclosure:** Think about how to attach the device in a way thatâ€™s comfortable for knitters.

---

#### **Decision: Button-Based vs. Motion-Based?**

- **Button-Based:** More reliable, easy to implement, and less prone to errors.
- **Motion-Based:** Fully automated, but might require tuning to avoid false counts.

#### **Idea 2: Meal Decider**  
**Pet Peeve:** Struggling to decide what to eat for lunch or dinner. 

**Solution:**  
A physical meal suggestion device that helps pick a meal based on my input and sends a recipe from a list of pre-selected options to my phone via bluetooth. I want te options to be pre-selected since I have some allergies/dietary restrictions and want them to be things I would actuallty want to make. 

**How it Works:**  
1. **Press a button or turn a dial** to generate a random meal suggestion.  
2. The **LCD screen or LED display** shows the meal idea (Tacos, Curry, etc)
3. **Bluetooth sends a recipe link** to my phone for the selected meal.  
4. (Optional) A second button allows for a **re-roll** if I donâ€™t like the first option.  

**Possible Components:**  
- **Push button or rotary dial** (to select a meal).  
- **LCD screen or LED matrix** (to display meal suggestions).  
- **HC-05 or HC-06 Bluetooth module** (to send recipe links to my phone).  
- **Arduino** (to handle meal selection, display, and Bluetooth connection).  
- **Pre-set meal list** with corresponding recipe URLs.  

**Challenges & Considerations:**  
- Ensuring **Bluetooth pairing** is smooth and simple.  
- How to encorporate a pre-set list of meal ideas and recipe links.  

#### **Idea 3: Euchre Scorekeeper**

**Pet Peeve:** Keeping score during Euchre can be tricky, especially when drinking, chatting, or multitasking. People forget to update the score, and sometimes thereâ€™s debate about what it should be.  

**Solution** 
A simple Euchre Scorekeeper that tracks the gameâ€™s progress with minimal effort so players can focus on having fun.  

**Features**  
- **Single-button simplicity:** Each team has one buttonâ€”click it the correct number of times to record points.  
- **Handles Euchre-specific scoring rules:**  
  - 1 click = 1 point (standard round win).  
  - 2 clicks = 2 points (team wins all 5 tricks or Euchres opponents).  
  - 4 clicks = 4 points (someone goes alone and wins).  
- **Visible score display:** A bright LED or LCD screen shows the current score at all times.  
- **Drinking-Friendly Mode:** Can provide random demands like*"Time for a cheers!"*.  
- **Auto-reset:** When a team reaches 10 points, the device flashes the winnerâ€™s name and resets automatically.  

**How It Works**
1. Each team has one button.  
2. The button is pressed once per point earned (1, 2, or 4 times).  
3. The LED display updates the score in real time.  
4. When a team reaches 10 points, the game announces the winner and resets automatically.  

**Components**  
- **2 push buttons** (one for each team).  
- **LED display or LCD screen** to show the score.  
- **Arduino** (to process scoring logic).  
- **Buzzer or LED flash** when a team scores.  

**Challenges & Considerations**  
- Avoiding accidental button presses 
- Ensuring points are counted correctly (a short delay between clicks to prevent double-counting).  
- Should there be an undo option?  
