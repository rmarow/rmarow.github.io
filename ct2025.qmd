---
tite: "Creative Technologies 2025"
---

## ATLS 5410 Motor Buffet

Group members: Caitlin Littlejohn, Robyn Marowitz, Eli Skelly, Clayton Hester


### Project overview 
Our idea was to create a maze that is either controlled by either 4 directional buttons or a joystick and use 2 motors in order to have movement in all 4 directions. 

### **Key Considerations**  

- **Motor Selection â€“ Servo or Stepper?**  
  We initially explored both options but ultimately chose **servo motors**, as we found more relevant documentation and examples supporting this approach.  

- **Maze Material â€“ Laser-Cut Wood or 3D Printing?**  
  Aesthetically, we liked the idea of carving the maze out of wood. However, considering **marble size** and **motor strength**, we decided that **3D printing** would be the more practical choice.  

- **Power **
Initially we worked with it plugged into the computer, but since there is a box to contain the wires and system we wanted to be able to hide the power in there. Ultimately a 5V power bank was what worked best for this. 


#### Phase 1: Prototyping and
Getting the motors to work together and be controlled by a joystick.  

![](attachments/mb-joystick.MOV){width=300}

#### Phase 2: Testing the system with cardboard.  

![](attachments/mb-cardboard.MOV){width=300}

#### Phase 3: Putting the pieces together

Printing a bracket to attach the motor to the maze and testing it.  

![](attachments/mb-motor-attachment.jpg){width=300}

Putting it all together.  

![](attachments/mb-final-photo.jpg){width=300}
![](attachments/mb-final-vid.MP4){width=300}



## ATLS 5410 IDC1: Independent Design Challenge 1  
### Solving a Personal Pet Peeve  

#### **Idea 1: Approach Indicator Light**  
**Pet Peeve:** Interruptions when focused. I work from home a few days a week and my desk is in the common area of the apartment but faces the wall and I get very frustrated if my boyfriend approaches while I am in a focused flow state. Sometimes it is also hard for him to tell if I am on a call or not, but as I am usually on camera I'm not easily able to tell him that. 

**Solution:**  
A **smart light** that detects when my boyfriend is near and displays a status message based on my availability - kind of like an "On Air" sign at a recording studio. The system could use a **proximity sensor** to detect his presence and display one of the following messages:  
- ðŸŸ¥ **"On a call"**   
- ðŸŸ¨ **"Focusing"**  
- ðŸŸ© **"Say Hey"**  

**Possible Components:**  
- **Ultrasonic sensor / RFID module** (for detection)  
- **LED strip or LCD screen** (to display the message)  
- **Button or voice control** (to manually change status)  
- **Arduino** (microcontroller for processing)  

### Notes from meeting:
- consider an attack mechanism for when someone gets too close (i.e. noise or water shooter)

### Working through the project:
Upon meeting with Zack I decided to move forward with the **Approach Indicator Light**. This would be put in my desk area which is in a common space. 

![](attachments/desk-area.jpeg){width=300}

# Phase 1: Arduino education

I first started by attempting to set up each of the most basic components individually.

I began with the ultrasonic sensor and was able to get it to read and print in the serial monitor. Then I followed a few tutorials and got the ultrasonic sensor to work alongside LED lights and trigger them based on distance: 
![](attachments/sensors-and-leds.jpeg){width=300}

After that I wanted to figure out how to trigger different `modes` with just one button and did quite a but of testing, but discovered nothing I had done was reliable enough so I would need to use a separate button for each mode. 

I was feeling confident at that point and decided to mess around with the LCD screen so that I could get a message out rather than indicate with just `red`, `green`, or `yellow` LEDS. 
![](attachments/stay-away-lcd.jpg){width=300}
As it can be seen in the image -- this used way to many of the pins on my arduino and did not actually look very nice or produce the words I wanted consistently. So I decided to shelf that. 

At that point I realized I was doing alright with both conceptualizing the code and getting components working so I decided to use my knowledge from the motor buffet to introduce a servo motor and use it with a catapult as an attack mechanism when the mode is red and the sensor detects someone closer than 12 inches away.

# Phase 2: Code and putting it all together

I realized I would need to generate a catapult for the defense mechanism so I printed a mini catapult (not without one small printing failure). ![](attachments/failed-catapult.jpeg){width=300} But with all failures I perservered and got to a working catapult. ![](catapult-vid.move){width=300}.

Unfortunately I am still working on the mechanism to use the servo to trigger the release of the catalpult.  

Happily - the code works great and I am using, 3 LEDS, 3 buttons, a motor, and an ultrasonic sensor all in sync. I have included a small portion of the code below.  

- **red mode** - this is do not disturb mode and at any distance will have a red light on. If there is detection closer than 3 feet the light will begin blinking, if detection occurs at 1 foot or less the light blinks faster and the catapult is released - attacking the disturber.
- **yellow mode** - much like a yellow light this means please proceed with caution (i am focusing but not on a call). The yellow light will blink fast as someone gets closer.
- **green mode** - friendly mode - light will always be green signalling its okay to approach.

```

  if (currentMode == 3 ){
    digitalWrite(LED2, LOW);
    digitalWrite(LED1, LOW);
    if (inches <= 12  && !hasFired) // if inches <= 12 and light is red shoot something with servo
    {
      // blink red light fast and shoot something
      blinkLED(LED3, 100);
      for (pos = 0; pos <= 90; pos += 1) {
      //for (pos = 90; pos >= 0; pos -= 1) {  // Reverse direction
        // in steps of 1 degree
        myservo.write(pos);              // tell servo to go to position in variable 'pos'
        delay(15); 
      }
      hasFired = true;                     
    }
    else if (inches <= 36 )
    {
      // blink red slower
      blinkLED(LED3, 100);
    }
    else if (inches <= 500 )
    {
      // red light on
      digitalWrite(LED3, HIGH);
    }
  }
  else if (currentMode == 2) {
    digitalWrite(LED3, LOW);
    digitalWrite(LED1, LOW);
    if (inches <= 12 ) // if inches <= 12 and light is red shoot something with servo
    {
      // blink yellow light fast 
      blinkLED(LED2, 50);
    }
    else if (inches <= 36 )
    {
      // blink yellow slower
      blinkLED(LED2, 100);
    }
    else if (inches <= 500 )
    {
      // yellow light on
      digitalWrite(LED2, HIGH);
    }
  }
  else if (currentMode == 1) {
    digitalWrite(LED3, LOW);
    digitalWrite(LED2, LOW);
    digitalWrite(LED1, HIGH);
  }
```

## Phase 3: Aesthetic

As it can be seen this quickly became pretty busy with all the used pins.

![](attachments/final-1.jpeg){width=300}

![](attachments/overhead.jpeg){width=300}

I moved the buttons to their own breadboard so that they would be more easily usable.
![]attachments/buttons-moved){width=300}


## Unused IDC1 ideas
#### **Idea 2: Meal Decider**  
**Pet Peeve:** Struggling to decide what to eat for lunch or dinner. 

**Solution:**  
A physical meal suggestion device that helps pick a meal based on my input and sends a recipe from a list of pre-selected options to my phone via bluetooth. I want te options to be pre-selected since I have some allergies/dietary restrictions and want them to be things I would actuallty want to make. 

**How it Works:**  
1. **Press a button or turn a dial** to generate a random meal suggestion.  
2. The **LCD screen or LED display** shows the meal idea (Tacos, Curry, etc)
3. **Bluetooth sends a recipe link** to my phone for the selected meal.  
4. (Optional) A second button allows for a **re-roll** if I donâ€™t like the first option.  

**Possible Components:**  
- **Push button or rotary dial** (to select a meal).  
- **LCD screen or LED matrix** (to display meal suggestions).  
- **HC-05 or HC-06 Bluetooth module** (to send recipe links to my phone).  
- **Arduino** (to handle meal selection, display, and Bluetooth connection).  
- **Pre-set meal list** with corresponding recipe URLs.  

**Challenges & Considerations:**  
- Ensuring **Bluetooth pairing** is smooth and simple.  
- How to encorporate a pre-set list of meal ideas and recipe links.  

#### **Idea 3: Euchre Scorekeeper**

**Pet Peeve:** Keeping score during Euchre can be tricky, especially when drinking, chatting, or multitasking. People forget to update the score, and sometimes thereâ€™s debate about what it should be.  

**Solution** 
A simple Euchre Scorekeeper that tracks the gameâ€™s progress with minimal effort so players can focus on having fun.  

**Features**  
- **Single-button simplicity:** Each team has one buttonâ€”click it the correct number of times to record points.  
- **Handles Euchre-specific scoring rules:**  
  - 1 click = 1 point (standard round win).  
  - 2 clicks = 2 points (team wins all 5 tricks or Euchres opponents).  
  - 4 clicks = 4 points (someone goes alone and wins).  
- **Visible score display:** A bright LED or LCD screen shows the current score at all times.  
- **Drinking-Friendly Mode:** Can provide random demands like*"Time for a cheers!"*.  
- **Auto-reset:** When a team reaches 10 points, the device flashes the winnerâ€™s name and resets automatically.  

**How It Works**
1. Each team has one button.  
2. The button is pressed once per point earned (1, 2, or 4 times).  
3. The LED display updates the score in real time.  
4. When a team reaches 10 points, the game announces the winner and resets automatically.  

**Components**  
- **2 push buttons** (one for each team).  
- **LED display or LCD screen** to show the score.  
- **Arduino** (to process scoring logic).  
- **Buzzer or LED flash** when a team scores.  

**Challenges & Considerations**  
- Avoiding accidental button presses 
- Ensuring points are counted correctly (a short delay between clicks to prevent double-counting).  
- Should there be an undo option?  
